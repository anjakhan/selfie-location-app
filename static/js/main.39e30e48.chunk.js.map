{"version":3,"sources":["components/Geolocation/Geolocation.js","components/MapBox/MapBox.js","components/Selfie/Selfie.js","containers/App.js","serviceWorker.js","index.js"],"names":["Geolocation","address","className","MapBox","lat","lng","Map","center","zoom","TileLayer","url","attribution","Marker","position","Selfie","App","getCurrentLocation","Promise","res","rej","navigator","geolocation","getCurrentPosition","setLocation","then","resp","coords","latitude","longitude","console","log","setState","L","Control","Geocoder","nominatim","reverse","latLng","results","r","a","properties","road","postcode","town","country","state","database","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wTAUeA,EARK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACnB,OACI,6BACI,iCAAM,0BAAMC,UAAU,KAAKD,M,wBCexBE,G,MAhBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IACnB,OACI,yBAAKH,UAAU,UACX,kBAACI,EAAA,EAAD,CAAKC,OAAQ,CAACH,EAAIC,GAAMG,KAAM,IAC1B,kBAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAEhB,kBAACC,EAAA,EAAD,CACIC,SAAU,CAACT,EAAKC,SCHrBS,EARA,WACX,OACI,6BACI,wD,wBCmDGC,G,wDA/Cb,aAAe,IAAD,8BACZ,gBAQFC,mBAAqB,WACnB,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvBC,UAAUC,YAAYC,mBAAmBJ,EAAKC,OAXpC,EAcdI,YAAc,WACZ,EAAKP,qBAAqBQ,MAAK,SAAAC,GAC7B,IAAMrB,EAAMqB,EAAKC,OAAOC,SAClBtB,EAAMoB,EAAKC,OAAOE,UACxBC,QAAQC,IAAI1B,EAAKC,GACjB,EAAK0B,SAAS,CAAC3B,IAAKA,EAAKC,IAAKA,IAEb2B,IAAEC,QAAQC,SAASC,YAC3BC,QAAQJ,IAAEK,OAAOjC,EAAKC,GAAM,IAAI,SAAAiC,GACrC,IAAMC,EAAID,EAAQ,GAClBT,QAAQC,IAAIS,GACZ,IAAMC,EAAID,EAAEE,WAAWxC,QACvB,EAAK8B,SAAS,CAAC9B,QAAQ,GAAD,OAAKuC,EAAEE,KAAP,aAAgBF,EAAEG,SAAlB,YAA8BH,EAAEI,KAAhC,aAAyCJ,EAAEK,kBAxBvE,EAAKC,MAAQ,CACTC,SAAU,GACV3C,IAAK,EACLC,IAAK,EACLJ,QAAS,IAND,E,gEA+BZ+C,KAAKzB,gB,+BAGG,IAAD,EACuByB,KAAKF,MAA3B1C,EADD,EACCA,IAAKC,EADN,EACMA,IAAKJ,EADX,EACWA,QAClB,OACE,yBAAKC,UAAU,MACb,wBAAIA,UAAU,aAAd,sBACA,kBAAC,EAAD,CAAaD,QAASA,IACtB,kBAAC,EAAD,CAAQG,IAAKA,EAAKC,IAAKA,IACvB,kBAAC,EAAD,W,GA1CU4C,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.39e30e48.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Geolocation = ({ address }) => {\r\n    return (\r\n        <div>\r\n            <p>at <span className='b'>{address}</span></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Geolocation;","import React from 'react'\r\nimport { Map, Marker, TileLayer } from \"react-leaflet\";\r\nimport './MapBox.css';\r\n\r\nconst MapBox = ({ lat, lng }) => {\r\n    return (\r\n        <div className='center'>\r\n            <Map center={[lat,lng]} zoom={15}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                <Marker\r\n                    position={[lat, lng]}\r\n                />\r\n            </Map>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MapBox;","import React from 'react';\r\n\r\nconst Selfie = () => {\r\n    return (\r\n        <div>\r\n            <p>SELFIE BOX PLEASE SMILE</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Selfie;","import React, { Component } from 'react';\nimport Geolocation from '../components/Geolocation/Geolocation';\nimport MapBox from '../components/MapBox/MapBox';\nimport Selfie from '../components/Selfie/Selfie';\nimport LCG from 'leaflet-control-geocoder';\nimport L from 'leaflet';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n        database: [],\n        lat: 0,\n        lng: 0,\n        address: ''\n    }\n  }\n  getCurrentLocation = () => {\n    return new Promise((res, rej) => {\n      navigator.geolocation.getCurrentPosition(res, rej);\n    });\n  }\n  setLocation = () => {\n    this.getCurrentLocation().then(resp => {\n      const lat = resp.coords.latitude;\n      const lng = resp.coords.longitude;\n      console.log(lat, lng)\n      this.setState({lat: lat, lng: lng})\n\n      const geocoder = L.Control.Geocoder.nominatim();\n      geocoder.reverse(L.latLng(lat, lng), 15, results => {\n          const r = results[0]\n          console.log(r)\n          const a = r.properties.address\n          this.setState({address: `${a.road}, ${a.postcode} ${a.town}, ${a.country}`})\n      })\n    });\n  }\n  componentDidMount() {\n    this.setLocation()\n  }\n  \n  render() {\n    const { lat, lng, address } = this.state\n    return (\n      <div className='tc'>\n        <h1 className='h1_header'>Capture the Moment</h1>\n        <Geolocation address={address} />\n        <MapBox lat={lat} lng={lng} />\n        <Selfie />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}